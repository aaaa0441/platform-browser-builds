{"version":3,"file":"key_events.js","sourceRoot":"","sources":["../../../../../../packages/platform-browser/src/dom/events/key_events.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @experimental\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) { super(doc); }\n\n  supports(eventName: string): boolean { return KeyEventsPlugin.parseEventName(eventName) != null; }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName) !;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  static parseEventName(eventName: string): {[key: string]: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop() !);\n\n    let fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    const result: {[k: string]: string} = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  static getEventFullKey(event: KeyboardEvent): string {\n    let fullKey = '';\n    let key = getDOM().getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n\n  static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n"]}